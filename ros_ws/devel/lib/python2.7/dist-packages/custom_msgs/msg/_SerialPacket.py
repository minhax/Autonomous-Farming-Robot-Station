# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/SerialPacket.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SerialPacket(genpy.Message):
  _md5sum = "c3caf2e11f9a4e075e8eb559468402d7"
  _type = "custom_msgs/SerialPacket"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 Code
uint16 Length
uint8[64] Buffer
"""
  __slots__ = ['Code','Length','Buffer']
  _slot_types = ['uint16','uint16','uint8[64]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Code,Length,Buffer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SerialPacket, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Code is None:
        self.Code = 0
      if self.Length is None:
        self.Length = 0
      if self.Buffer is None:
        self.Buffer = b'\0'*64
    else:
      self.Code = 0
      self.Length = 0
      self.Buffer = b'\0'*64

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H().pack(_x.Code, _x.Length))
      _x = self.Buffer
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_64B().pack(*_x))
      else:
        buff.write(_get_struct_64s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.Code, _x.Length,) = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 64
      self.Buffer = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H().pack(_x.Code, _x.Length))
      _x = self.Buffer
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_64B().pack(*_x))
      else:
        buff.write(_get_struct_64s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.Code, _x.Length,) = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 64
      self.Buffer = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_64s = None
def _get_struct_64s():
    global _struct_64s
    if _struct_64s is None:
        _struct_64s = struct.Struct("<64s")
    return _struct_64s
_struct_64B = None
def _get_struct_64B():
    global _struct_64B
    if _struct_64B is None:
        _struct_64B = struct.Struct("<64B")
    return _struct_64B
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
